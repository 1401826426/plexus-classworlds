From 5c64be4c539d5cea5d0f4f03186f0e66381c0005 Mon Sep 17 00:00:00 2001
From: BJ Hargrave <bj@bjhargrave.com>
Date: Thu, 21 Aug 2014 11:28:35 -0400
Subject: [PATCH] Override getClassLoadingLock

This is to work around a problem in the implementation of
getClassLoadingLock in IBM Java.

Fixes https://github.com/sonatype/plexus-classworlds/issues/14
---
 .../plexus/classworlds/realm/ClassRealm.java       | 24 ++++++++++++++++++++++
 1 file changed, 24 insertions(+)

diff --git a/src/main/java/org/codehaus/plexus/classworlds/realm/ClassRealm.java b/src/main/java/org/codehaus/plexus/classworlds/realm/ClassRealm.java
index 04c9236..1bb41c4 100644
--- a/src/main/java/org/codehaus/plexus/classworlds/realm/ClassRealm.java
+++ b/src/main/java/org/codehaus/plexus/classworlds/realm/ClassRealm.java
@@ -33,6 +33,8 @@
 import java.util.LinkedHashSet;
 import java.util.SortedSet;
 import java.util.TreeSet;
+import java.util.concurrent.ConcurrentMap;
+import java.util.concurrent.ConcurrentHashMap;
 
 /**
  * The class loading gateway. Each class realm has access to a base class loader, imports form zero or more other class
@@ -62,6 +64,8 @@
 
     private static final boolean isParallelCapable = Closeable.class.isAssignableFrom( URLClassLoader.class );
 
+    private final ConcurrentMap<String, Object> lockMap;
+
     /**
      * Creates a new class realm.
      *
@@ -81,6 +85,14 @@ public ClassRealm( ClassWorld world, String id, ClassLoader baseClassLoader )
         foreignImports = new TreeSet<Entry>();
 
         strategy = StrategyFactory.getStrategy( this );
+
+        lockMap = isParallelCapable ? new ConcurrentHashMap<String, Object>() : null;
+
+        if ( isParallelCapable ) {
+        	// We must call super.getClassLoadingLock at least once
+        	// to avoid NPE in super.loadClass.
+        	super.getClassLoadingLock(getClass().getName());
+        }
     }
 
     public String getId()
@@ -410,6 +422,18 @@ private Object getClassRealmLoadingLock( String name )
         }
     }
 
+    @Override
+    protected Object getClassLoadingLock( String name )
+    {
+        if ( isParallelCapable )
+        {
+            Object newLock = new Object();
+            Object lock = lockMap.putIfAbsent( name, newLock );
+            return ( lock == null ) ? newLock : lock;
+        }
+        return this;
+    }
+
     public Class<?> loadClassFromParent( String name )
     {
         ClassLoader parent = getParentClassLoader();
